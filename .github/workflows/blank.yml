## This is a basic workflow to help you get started with Actions
#
#name: CI
#
## Controls when the workflow will run
#on:
#  # Triggers the workflow on push or pull request events but only for the "main" branch
#  push:
#    branches: [ "main" ]
#  pull_request:
#    branches: [ "main" ]
#
#  # Allows you to run this workflow manually from the Actions tab
#  workflow_dispatch:
#
## A workflow run is made up of one or more jobs that can run sequentially or in parallel
#jobs:
#  # This workflow contains a single job called "build"
#  build:
#    # The type of runner that the job will run on
#    runs-on: ubuntu-latest
#
#    # Steps represent a sequence of tasks that will be executed as part of the job
#    steps:
#      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#      - uses: actions/checkout@v4
#
#      # Runs a single command using the runners shell
#      - name: Run a one-line script
#        run: echo Hello, world!
#
#      # Runs a set of commands using the runners shell
#      - name: Run a multi-line script
#        run: |
#          echo Add other actions to build,
#          echo test, and deploy your project.

#


name: Cucumber Tests CI

on:
  push:
    branches:
      - main
  schedule:
    # Schedule to run every day at 5 AM Indian time (IST)
    - cron: '30 23 * * *'  # 5:00 AM IST = 11:30 PM UTC

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: Set up JDK 16
      - name: Set up JDK 16
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '16'

      # Step 3: Cache Maven dependencies for faster builds
      - name: Cache Maven dependencies
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Step 4: Install Maven dependencies
      - name: Install dependencies
        run: mvn install -DskipTests

      # Step 5: Clean Temporary Reports Directory
      - name: Clean Temp Reports Directory
        run: |
          if [ -d "/tmp/reports" ]; then
            rm -rf /tmp/reports/*
            echo "Old temporary reports cleaned."
          else
            mkdir -p /tmp/reports/cucumber
            echo "Created temporary reports directories."
          fi

      # Step 6: Run Cucumber tests and generate report
      - name: Run Cucumber tests
        run: |
          mvn test
          mvn site -DreportOutputDirectory=/tmp/reports/cucumber/

      # Step 7: Upload Cucumber reports as artifacts
      - name: Upload Cucumber Report as Artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: cucumber-report
          path: /tmp/reports/cucumber/*.html

      # Step 8: Send email with Cucumber reports attached
      - name: Send email with Cucumber Reports
        if: always()  # Ensure this step runs whether the build succeeds or fails
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "Cucumber Report - Build ${{ github.run_number }}: ${{ job.status }}"
          body: |
            Hello,
            
            The Cucumber Automation build ${{ github.run_number }} has completed with status: **${{ job.status }}**.
            
            Please find the attached Cucumber Reports or view them at the deployed location.
            
            Regards,
            CI System
          to: amol.kadam@tekditechnologies.com, another.email@example.com, third.email@example.com
          from: CI System <cucumberautomationtest@gmail.com>
          attachments: |
            /tmp/reports/cucumber/*.html
